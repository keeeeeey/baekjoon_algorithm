# DP(Dynamic Programming)
# 동적 계획 (Dynamic Programming) 알고리즘은 그리디 알고리즘과 같이 최적화 문제를 해결하는 알고리즘이다.
# 동적 계획 알고리즘은 먼저 입력 크기가 작은 부분 문제들을 모두 해결한 후에
# 그 해들을 이용하여 보다 큰 크기의 부분 문제들을 해결하여, 최종적으로 원래
# 주어진 입력의 문제를 해결하는 알고리즘이다.

# 피보나치 수 DP 적용
# 피보나치 수는 부분 문제의 답으로부터 본 문제의 답을 얻을 수 있으므로 최적 부분 구조로 이루어져 있다.

def fibo2(n):
    f = [0, 1]

    for i in range(2, n + 1):
        f.append(f[i - 1] + f[i - 2])

    return f[n]

# a, b = b, a + b

# DP의 구현 방식
# - recursive 방식 : fib1()
# - iterative 방식 : fib2()

# memoiziation을 재귀적 구조에 사용하는 것보다 반복적 구조로 DP를 구현한 것이 성능 면에서 보다 효율적이다.
# 재귀적 귀조는 내부에 시스템 호출 스택을 사용하는 오버헤드가 발생하기 때문이다.