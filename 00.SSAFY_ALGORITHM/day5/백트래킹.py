# 백트래킹 (Backtracking) 기법은 해를 찾는 도중에 막히면 (적, 해가 아니면) 되돌아가서 다시 해를 찾아 가는 기법이다.
# 백트래킹 기법은 최적화 (optimizatioin) 문제와 결정 (decision) 문제를 해결할 수 있다.
# 결정 문제 : 문제의 조건을 만족하는 해가 존재하는지의 여부를 'yes' 또는 'no'가 답하는 문제

# 백트래킹 : 미로찾기
# n-Queen 문제
# Map coloring
# 부분 집합의 합(Subset Sum) 문제 등

# 백트래킹과 깊이우선탐색과의 차이!!!
# 어떤 노드에서 출발하는 경로가 해결책으로 이어질 것 같지 않으면 더 이상 그 경로를 따라가지 않음으로써
# 시도의 횟수를 줄임. (Prunning 가지치기)

# 깊이우선탐색이 모든 경로를 추적하는데 비해 백트래킹은 불필요한 경로를 조기에 차단

# 깊이 우선 탐색을 가하기에는 경우의 수가 너무나 많음. 즉, N! 가지의 경우의 수를 가진
# 문제에 대해 깊이우선탐색을 가하면 당연히 처리 불가능한 문제.

# 백트래킹 알고리즘을 적용하면 일반적으로 경우의 수가 줄어들지만 이 역시 최악의 경우에는
# 여전히 지수함수 시간(Exponential Time)을 요하므로 처리 불가능


# 백트래킹
# 어떤 노드의 유망성을 점검한 후에 유망(Promising)하지 않다고 결정되면 그 노드의 부모로 되돌아가(backtracking) 다음 자식 노드로 감
# 어떤 노드를 방문하였을 때 그 노드를 포함한 경로가 해답이 될 수 없으면 그 노드는 유망하지 않다고 하며,
# 반대로 해답의 가능성이 있으면 유망하다고 한다.
# 가지치기(pruning) : 유망하지 않는 노드가 포함되는 경로는 더 이상 고려하지 않는다.


# 부분집합 구하기
# 어떤 집합의 공집합과 자기자신을 포함한 모든 부분집합을 powerset이라고 하며 구하고자 하는
# 어떤 집합의 원소 개수가 n일 경우 부분집합의 개수는 2^n개 이다.

# 백트래킹 기법으로 powerset을 구해보자.
# 앞에서 설명한 일반적인 백트래킹 접근 방법을 이용한다.
# n개의 원소가 들어있는 집합의 2^n개의 부분집합을 만들 때는, true 또는 false값을 가지는
# 항목들로 구성된 n개의 배열을 만드는 방법을 이용
# 여기서 배열의 i번째 항목은 i번째의 원소가 부분집합의 값인지 아닌지를 나타내는 값이다.

# def f(i, N):
#     if i == N:
#         for i in range(N):
#             if bit[i]:
#                 print(A[i], end=" ")
#         print()
#     else:
#         bit[i] = 1
#         f(i + 1, N)
#         bit[i] = 0
#         f(i + 1, N)

def f(i, N, s, t):
    global answer
    if i == N:        # 모든 원소가 고려된 경우
        if s == t:  # 부분집합의 합이 t면
            answer += 1
        return
    elif s > t:
        return
    else:
        f(i + 1, N, s + A[i], t)        # A[i]가 포함된 경우
        f(i + 1, N, s, t)               # A[i]가 포함되지 않은 경우

A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
bit = [0] * 3
answer = 0
f(0, 10, 0, 10)
print(answer)